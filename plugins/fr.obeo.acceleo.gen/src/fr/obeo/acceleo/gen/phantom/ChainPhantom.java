/*
 * Copyright (c) 2005-2008 Obeo
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Obeo - initial API and implementation
 */

package fr.obeo.acceleo.gen.phantom;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IFile;

/**
 * The .launcher phantom file.
 * 
 * @author www.obeo.fr
 * 
 */
public class ChainPhantom implements Externalizable {

	private static final long serialVersionUID = 2L;

	/**
	 * The chain used to generate the files.
	 */
	protected Map chain2files = new HashMap();

	/**
	 * Clears all the informations about the chain.
	 * 
	 * @param chain
	 *            is the chain
	 */
	public void clear(IFile chain) {
		chain2files.remove(chain.getFullPath().toString());
	}

	/**
	 * Adds a file generated by the given chain.
	 * 
	 * @param chain
	 *            is the chain
	 * @param file
	 *            is the generated file
	 */
	public void add(IFile chain, IFile file) {
		String key = chain.getFullPath().toString();
		String value = file.getFullPath().toString();
		List files = (List) chain2files.get(key);
		if (files == null) {
			files = new ArrayList();
			chain2files.put(key, files);
		}
		if (!files.contains(value)) {
			files.add(value);
		}
	}

	/**
	 * Indicates if the given file has been generated.
	 * 
	 * @param file
	 *            is the file to test
	 * @return true if the given file has been generated
	 */
	public boolean isGenerated(IFile file) {
		String value = file.getFullPath().toString();
		Iterator it = chain2files.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry entry = (Map.Entry) it.next();
			List files = (List) entry.getValue();
			if (files.contains(value)) {
				return true;
			}
		}
		return false;
	}

	/* (non-Javadoc) */
	public void readExternal(ObjectInput arg) throws IOException, ClassNotFoundException {
		int sizeMap = arg.readInt();
		for (int i = 0; i < sizeMap; i++) {
			String key = arg.readUTF();
			int sizeList = arg.readInt();
			List value = new ArrayList(sizeList);
			for (int j = 0; j < sizeList; j++) {
				value.add(arg.readUTF());
			}
			chain2files.put(key, value);
		}
	}

	/* (non-Javadoc) */
	public void writeExternal(ObjectOutput arg) throws IOException {
		arg.writeInt(chain2files.size());
		Iterator it1 = chain2files.entrySet().iterator();
		while (it1.hasNext()) {
			Map.Entry entry = (Map.Entry) it1.next();
			String key = (String) entry.getKey();
			List files = (List) entry.getValue();
			arg.writeUTF(key);
			arg.writeInt(files.size());
			Iterator it2 = files.iterator();
			while (it2.hasNext()) {
				arg.writeUTF((String) it2.next());
			}
		}
	}

}
